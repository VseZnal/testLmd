// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backend/proto/product.proto

package product_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReservationProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReservationProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReservationProductRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReservationProductRequestMultiError, or nil if none found.
func (m *ReservationProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReservationProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetWarehouseId(); val < 0 || val >= 9223372036854775807 {
		err := ReservationProductRequestValidationError{
			field:  "WarehouseId",
			reason: "value must be inside range [0, 9223372036854775807)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetId() {
		_, _ = idx, item

		if val := item; val < 0 || val >= 9223372036854775807 {
			err := ReservationProductRequestValidationError{
				field:  fmt.Sprintf("Id[%v]", idx),
				reason: "value must be inside range [0, 9223372036854775807)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ReservationProductRequestMultiError(errors)
	}

	return nil
}

// ReservationProductRequestMultiError is an error wrapping multiple validation
// errors returned by ReservationProductRequest.ValidateAll() if the
// designated constraints aren't met.
type ReservationProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReservationProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReservationProductRequestMultiError) AllErrors() []error { return m }

// ReservationProductRequestValidationError is the validation error returned by
// ReservationProductRequest.Validate if the designated constraints aren't met.
type ReservationProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReservationProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReservationProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReservationProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReservationProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReservationProductRequestValidationError) ErrorName() string {
	return "ReservationProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReservationProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReservationProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReservationProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReservationProductRequestValidationError{}

// Validate checks the field values on ReservationProductResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReservationProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReservationProductResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReservationProductResponseMultiError, or nil if none found.
func (m *ReservationProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReservationProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	if len(errors) > 0 {
		return ReservationProductResponseMultiError(errors)
	}

	return nil
}

// ReservationProductResponseMultiError is an error wrapping multiple
// validation errors returned by ReservationProductResponse.ValidateAll() if
// the designated constraints aren't met.
type ReservationProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReservationProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReservationProductResponseMultiError) AllErrors() []error { return m }

// ReservationProductResponseValidationError is the validation error returned
// by ReservationProductResponse.Validate if the designated constraints aren't met.
type ReservationProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReservationProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReservationProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReservationProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReservationProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReservationProductResponseValidationError) ErrorName() string {
	return "ReservationProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReservationProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReservationProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReservationProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReservationProductResponseValidationError{}

// Validate checks the field values on CancelReservationProductRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelReservationProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelReservationProductRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CancelReservationProductRequestMultiError, or nil if none found.
func (m *CancelReservationProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelReservationProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetId() {
		_, _ = idx, item

		if val := item; val < 0 || val >= 9223372036854775807 {
			err := CancelReservationProductRequestValidationError{
				field:  fmt.Sprintf("Id[%v]", idx),
				reason: "value must be inside range [0, 9223372036854775807)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CancelReservationProductRequestMultiError(errors)
	}

	return nil
}

// CancelReservationProductRequestMultiError is an error wrapping multiple
// validation errors returned by CancelReservationProductRequest.ValidateAll()
// if the designated constraints aren't met.
type CancelReservationProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelReservationProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelReservationProductRequestMultiError) AllErrors() []error { return m }

// CancelReservationProductRequestValidationError is the validation error
// returned by CancelReservationProductRequest.Validate if the designated
// constraints aren't met.
type CancelReservationProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelReservationProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelReservationProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelReservationProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelReservationProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelReservationProductRequestValidationError) ErrorName() string {
	return "CancelReservationProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelReservationProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelReservationProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelReservationProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelReservationProductRequestValidationError{}

// Validate checks the field values on CancelReservationProductResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CancelReservationProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelReservationProductResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CancelReservationProductResponseMultiError, or nil if none found.
func (m *CancelReservationProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelReservationProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return CancelReservationProductResponseMultiError(errors)
	}

	return nil
}

// CancelReservationProductResponseMultiError is an error wrapping multiple
// validation errors returned by
// CancelReservationProductResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelReservationProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelReservationProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelReservationProductResponseMultiError) AllErrors() []error { return m }

// CancelReservationProductResponseValidationError is the validation error
// returned by CancelReservationProductResponse.Validate if the designated
// constraints aren't met.
type CancelReservationProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelReservationProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelReservationProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelReservationProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelReservationProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelReservationProductResponseValidationError) ErrorName() string {
	return "CancelReservationProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelReservationProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelReservationProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelReservationProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelReservationProductResponseValidationError{}

// Validate checks the field values on GetAllProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllProductsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllProductsRequestMultiError, or nil if none found.
func (m *GetAllProductsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllProductsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetWarehouseId(); val < 0 || val >= 9223372036854775807 {
		err := GetAllProductsRequestValidationError{
			field:  "WarehouseId",
			reason: "value must be inside range [0, 9223372036854775807)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAllProductsRequestMultiError(errors)
	}

	return nil
}

// GetAllProductsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllProductsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllProductsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllProductsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllProductsRequestMultiError) AllErrors() []error { return m }

// GetAllProductsRequestValidationError is the validation error returned by
// GetAllProductsRequest.Validate if the designated constraints aren't met.
type GetAllProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllProductsRequestValidationError) ErrorName() string {
	return "GetAllProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllProductsRequestValidationError{}

// Validate checks the field values on GetAllProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllProductsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllProductsResponseMultiError, or nil if none found.
func (m *GetAllProductsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllProductsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProduct() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllProductsResponseValidationError{
						field:  fmt.Sprintf("Product[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllProductsResponseValidationError{
						field:  fmt.Sprintf("Product[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllProductsResponseValidationError{
					field:  fmt.Sprintf("Product[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllProductsResponseMultiError(errors)
	}

	return nil
}

// GetAllProductsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllProductsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllProductsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllProductsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllProductsResponseMultiError) AllErrors() []error { return m }

// GetAllProductsResponseValidationError is the validation error returned by
// GetAllProductsResponse.Validate if the designated constraints aren't met.
type GetAllProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllProductsResponseValidationError) ErrorName() string {
	return "GetAllProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllProductsResponseValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Product) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProductMultiError, or nil if none found.
func (m *Product) ValidateAll() error {
	return m.validate(true)
}

func (m *Product) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Size

	// no validation rules for Quantity

	if len(errors) > 0 {
		return ProductMultiError(errors)
	}

	return nil
}

// ProductMultiError is an error wrapping multiple validation errors returned
// by Product.ValidateAll() if the designated constraints aren't met.
type ProductMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductMultiError) AllErrors() []error { return m }

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}
